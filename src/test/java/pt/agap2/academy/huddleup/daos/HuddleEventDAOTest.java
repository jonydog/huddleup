package pt.agap2.academy.huddleup.daos;

import java.util.Date;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import pt.agap2.academy.huddleup.configs.TestConfiguration;
import pt.agap2.academy.huddleup.daos.dtos.EventDetails;
import pt.agap2.academy.huddleup.model.HuddleEvent;
import pt.agap2.academy.huddleup.model.Location;
import pt.agap2.academy.huddleup.model.User;

@RunWith(SpringJUnit4ClassRunner.class )
@ContextConfiguration( classes= TestConfiguration.class)
public class HuddleEventDAOTest {

	
	@Autowired
	private HuddleEventDAO huddleEventDao;
	
	@Autowired
	private UserDAO userDao;
	
	public static HuddleEvent getDemoLisbonHuddleEvent(User existentUser){
		
		HuddleEvent event = new HuddleEvent();
		event.setAddress("Rua  das Pretas");
		event.setCity("Lisboa");
		event.setDescription("Great Lisbon Event");
		event.setEventDate(new  Date());
		event.setEventName("Mega party");
		event.setEventType("Party");
		event.setHost( existentUser );
		event.setIsDeleted(false);
		event.setLocation( new Location(38.7223f,9.1393f) );
		event.setMaxAtt(10);
		event.setPhoto(null);
		event.setRequirements("Drinks");
		
		return event;
	}
	
	
	public static HuddleEvent getDemoPortoHuddleEvent(User existentUser){

		
		HuddleEvent event = new HuddleEvent();
		event.setAddress("Avenida da liberdade" );
		event.setCity("Porto");
		event.setDescription("Great Porto Event");
		event.setEventDate(new  Date());
		event.setEventName("Mega party");
		event.setEventType("Party");
		event.setHost( existentUser );
		event.setIsDeleted(false);
		event.setLocation( new Location(41.1579f,8.6291f) );
		event.setMaxAtt(10);
		event.setPhoto(null);
		event.setRequirements("Drinks and dank w33d");
		
		return event;
	}
	
	@Test
	public void springIsWorking(){
		
		Assert.assertNotNull(this.huddleEventDao);
	}
	
	@Test
	public void insertEvent(){
		
		User  user = UserDAOTest.getDemoUser();
		this.userDao.save(user);
		
		HuddleEvent event = getDemoLisbonHuddleEvent(user);
		this.huddleEventDao.save(event);
			
		this.huddleEventDao.save(getDemoPortoHuddleEvent(user));
		this.huddleEventDao.save(getDemoPortoHuddleEvent(user));
		this.huddleEventDao.save(getDemoPortoHuddleEvent(user));
		this.huddleEventDao.save(getDemoPortoHuddleEvent(user));
		this.huddleEventDao.save(getDemoPortoHuddleEvent(user));
		
		// test if the  event was inserted
		Assert.assertNotNull( this.huddleEventDao.findOne(event.getId()) );
	}
	
	
	@Test
	public void testAutogeneratedMethod(){
		
		User  user = UserDAOTest.getDemoUser();
		this.userDao.save(user);
		HuddleEvent event = getDemoLisbonHuddleEvent(user);
		event.setCity( "abrantes" );
		this.huddleEventDao.save(event);
		
		
		EventDetails eventDetails = this.huddleEventDao.findEventDetailsById(event.getId()); 
		Assert.assertTrue( eventDetails.getCity().equals("abrantes") );
		
	}
	
}
